
string command;
int i;
int j;
int right_border;
int command_len;
int call_number;
string str_call_number; 
string func_name_br;
string return_type;
string buf;
string buf2;
string buf3; 
string buf4;
string rbuf;
string symbol; 
string $reverse_ret;
string indexes_ret;
string dest;
int int_buf;
int int_buf2;
int int_buf3; 
int int_buf4;
int int_buf5;
int type_len;
int arg_type_len;
int func_begin;
int internal_func_begin;
int func_end; 
int func_len;
int limit_border;
int number;
int func_len;
int func_name_len;
int buf_len;
int br_number;
int fig_br_number;
int func_pos;
string func_name;
string arg_type;
string arg_name;
string $in_stack_ret;
int left_border;
int comma_pos;
stack user_stack;
stack buf_stack;
stack buf_stack_reserv;
stack buf_stack2;
stack inside_vars_stack;
stack inside_vars_stack_reserv;
stack null;
stack undefined_args;
stack r;
stack el;
bool is_first;
bool was_func;
bool was_here; 
bool void_flag;
bool in_stack_res;
bool undefine_checked;
string root_source; 
string source;
string temp_dir;
string ops_ret;
string temp_buf;
string $func_end_res;
string $ops_ret;
string deb;
is_first = True;
was_here = False;
undefine_checked = False;
 
root_source = "benv/recurs_program.b";
SET_SOURCE(root_source);
source = root_source;
dest = "benv/func_program.b";
SET_DEST(dest);
next_command(command);
#again_begin:
i = 0;
j = 0;
right_border = 0;
command_len = 0;
call_number = 0;
str_call_number = ""; 
return_type = "";
buf = "";
buf2 = "";
buf3 = ""; 
int_buf = 0;
int_buf2 = 0;
int_buf3 = 0; 
type_len = 0;
arg_type_len = 0;
func_begin = 0;
func_end = 0; 
func_len = 0;
number = 0;
func_len = 0;
br_number = 0;
func_name = "";
arg_type = "";
arg_name = "";
left_border = 0;
comma_pos = 0;
was_func = False; 
buf_stack = null;
buf_stack_reserv = null;
buf_stack2 = null;
inside_vars_stack = null;
inside_vars_stack_reserv = null;
call_number = 0; 
#begin:
[goto(#again_end), ("end" == command), print("")];
void_flag = False; 
br_number = index(command, "(");
[goto(#command_end), (-1 == br_number), print("")];
buf = command[0:br_number];
return_type = "int";
number = index(buf, "int");
[goto(#end_type), (0 == number), print("")];
return_type = "bool";
number = index(buf, "bool");
[goto(#end_type), (0 == number), print("")];
return_type = "float";
number = index(buf, "float");
[goto(#end_type), (0 == number), print("")];
return_type = "stack";
number = index(buf, "stack");
[goto(#end_type), (0 == number), print("")];
return_type = "string";
number = index(buf, "string");
[goto(#end_type), (0 == number), print("")];
return_type = "void";
number = index(buf, "void");
[goto(#end_type), (0 == number), print("")];
goto(#command_end);
#end_type:
[print(""),("void" == return_type), goto(#set_void_flag_end)];
void_flag = True;
#set_void_flag_end:
type_len = len(return_type);
func_name = command[type_len:br_number];
buf = (("string $" + func_name) + "_return_var");
send_command(buf);
left_border = (br_number + 1);
was_func = True;
buf = (((return_type + " $") + func_name) + "_res");
[goto(#not_define_void_end), (void_flag), print("")];
send_command(buf);
#not_define_void_end:
print("");
#func_args:
[goto(#func_end), ("{" == command[0]), print("")];
arg_type = "int";
right_border = (left_border + 3);
number = index(command[left_border:right_border], "int");
[print(""), (-1 == number), goto(#arg_type_end)];
arg_type = "bool";
right_border = (left_border + 4);
number = index(command[left_border:right_border], "bool");
[print(""), (-1 == number), goto(#arg_type_end)];
arg_type = "float";
right_border = (left_border + 5);
number = index(command[left_border:right_border], "float");
[print(""), (-1 == number), goto(#arg_type_end)];
arg_type = "stack";
right_border = (left_border + 5);
number = index(command[left_border:right_border], "stack");
[print(""), (-1 == number), goto(#arg_type_end)];
arg_type = "string";
right_border = (left_border + 6);
number = index(command[left_border:right_border], "string");
[print(""), (-1 == number), goto(#arg_type_end)];
arg_type = "no_args";
goto(#func_end);
#arg_type_end:
arg_type_len = len(arg_type);
command_len = len(command);
command = command[right_border:command_len];
comma_pos = index(command, ",");
[print(""), (-1 == comma_pos), goto(#br_end)];
comma_pos = index(command, ")");
#br_end:
arg_name = command[0:comma_pos];  
user_stack.push(arg_name);
buf_stack.push(arg_name);
buf_stack2.push(arg_name);
buf_stack2.push(arg_type);
left_border = (comma_pos + 1);
command_len = len(command);
command = command[left_border:command_len];
left_border = 0;
right_border = index(command, ",");
[print(""), (-1 == right_border), goto(#func_args)];
right_border = 3;
goto(#func_args);
#func_end:
command_len = len(command);
buf = command[1:command_len];
command = "goto(#";
command = (command + func_name);
command = (command + "_end)");
send_command(command);
command = "#";
command = (command + func_name);
command = (command + ":\n");
command=(command+"print(\"\")");
send_command(command);
command = "";
#args_to_pass:
buf_stack2.pop(arg_type);
buf_stack2.pop(arg_name);
command = ((command + arg_type) + arg_name);
[goto(#not_send_pass_args), ("end" == arg_type), print("")];
send_command(command);
#not_send_pass_args:
command = "";
[print(""), ("end" == arg_type), goto(#args_to_pass)];
fig_br_number = index(buf, "{");
[print(""), (-1 == fig_br_number), goto(#not_send_fig_br)];
send_command(buf);
goto(#not_send_fig_br_end);
#not_send_fig_br:
buf="print(\"\")";
#not_send_fig_br_end:
command = "";
arg_name = "";
#pop_start:
[goto(#pop_end), ("end" == arg_name), print("")];
user_stack.pop(arg_name);
command = (command + "pop(");
command = (command + arg_name);
command = (command + ")");
[goto(#not_send_pop), ("end" == arg_name), print("")];
send_command(command);
#not_send_pop:
command = "";
goto(#pop_start);
#pop_end:
[goto(#check_undefine_end0), (undefine_checked), print("")];
undefine_checked = True;
#check_begin:
[goto(#check_again), ("}" == buf), print("")];
command_len = len(buf);
[print(""), (command_len > 8), goto(#check_next)];
temp_buf = buf[0:8];
[print(""), ("UNDEFINE" == temp_buf), goto(#check_next)];
command_len = (command_len - 1);
temp_buf = buf[9:command_len];
undefined_args.push(temp_buf);
#check_next:
next_command(buf);
goto(#check_begin);
#check_again:
was_func = False;
RESET_SOURCE();
UNSET_DEST();
DEL_DEST(dest);
SET_DEST(dest);
next_command(command);
goto(#again_begin);
#check_undefine_end0:
undefine_checked = False;
left_border = 0;
#inside_args:
limit_border = len(buf);
limit_border = (limit_border - 1);
[goto(#inside_args_end), (buf == "}"), print("")];
arg_type = "int";
right_border = (left_border + 3);
[goto(#no_args), (right_border > limit_border), print("")];
number = index(buf[left_border:right_border], "int");
[print(""), (-1 == number), goto(#inside_arg_type_end)];
arg_type = "bool";
right_border = (left_border + 4);
[goto(#no_args), (right_border > limit_border), print("")];
number = index(buf[left_border:right_border], "bool");
[print(""), (-1 == number), goto(#inside_arg_type_end)];
arg_type = "float";
right_border = (left_border + 5);
[goto(#no_args), (right_border > limit_border), print("")];
number = index(buf[left_border:right_border], "float");
[print(""), (-1 == number), goto(#inside_arg_type_end)];
arg_type = "stack";
right_border = (left_border + 5);
[goto(#no_args), (right_border > limit_border), print("")];
number = index(buf[left_border:right_border], "stack");
[print(""), (-1 == number), goto(#inside_arg_type_end)];
arg_type = "string";
right_border = (left_border + 6);
[goto(#no_args), (right_border > limit_border), print("")];
number = index(buf[left_border:right_border], "string");
[print(""), (-1 == number), goto(#inside_arg_type_end)];
arg_type = "no_args";
#inside_arg_type_end:
[goto(#no_args), ("no_args" == arg_type), print("")];
type_len = len(arg_type); 
command_len = len(buf);
arg_name = buf[type_len:command_len];
$in_stack_ret="#undef_ret";
user_stack.push(arg_name);
push(arg_name); 
push(undefined_args);
goto(#in_stack);
#undef_ret:
pop(in_stack_res);
[goto(#no_args), (in_stack_res), print("")];
inside_vars_stack.push(arg_name);
#no_args:
command_len = len(buf);
[print(""), (command_len > 6), goto(#not_send_return_end)];
r = reg_find("[^=]=[^=]", buf);
r.pop(el);
el.pop(rbuf);
[print(""), ("end" == rbuf), goto(#not_send_return_end)];
r = reg_find("^return.*", buf);
r.pop(el);
el.pop(rbuf);
[goto(#not_send_return_end), ("end" == rbuf), print("")];
el.pop(rbuf);
int_buf4 = int(rbuf);
int_buf5 = len(buf);
[print(""), (int_buf4 == int_buf5), goto(#not_send_return_end)];
[goto(#not_send_return), ("return" == buf[0:6]), goto(#not_send_return_end)];
#not_send_return:
buf = buf[6:command_len];
buf = ((("push(") + buf) + ")");
send_command(buf);
next_command(buf);
#pop_args_start0:
inside_vars_stack.pop(arg_name);
[goto(#pop_args_end0), ("end" == arg_name), print("")];
command = (("UNDEFINE(" + arg_name) + ")");
[goto(#not_send0), ("end" == arg_name), print("")];
send_command(command);
inside_vars_stack_reserv.push(arg_name);
#not_send0:
goto(#pop_args_start0);
#pop_args_end0:
arg_name = "";
#undefine_start0:
[goto(#undefine_end0), ("end" == arg_name), print("")];
buf_stack.pop(arg_name); 
command = (("UNDEFINE(" + arg_name) + ")");
[goto(#undefine_end0), ("end" == arg_name), print("")];
send_command(command);
buf_stack_reserv.push(arg_name);
goto(#undefine_start0);
#undefine_end0:
inside_vars_stack = inside_vars_stack_reserv;
buf_stack = buf_stack_reserv;
inside_vars_stack_reserv = null;
buf_stack_reserv = null; 
arg_name = "";
command = (("goto($" + func_name) + "_return_var)");
send_command(command);
goto(#inside_args);
#not_send_return_end:
send_command(buf);
next_command(buf);
goto(#inside_args);
#inside_args_end:
[print(""), ("void" == return_type), goto(#define_return_end)];
#pop_args_start:
inside_vars_stack.pop(arg_name);
[goto(#pop_args_end), ("end" == arg_name), print("")];
command = (("UNDEFINE(" + arg_name) + ")");
[goto(#not_send), ("end" == arg_name), print("")];
send_command(command);
inside_vars_stack_reserv.push(arg_name);
#not_send:
goto(#pop_args_start);
#pop_args_end:
arg_name = "";
#undefine_start:
[goto(#undefine_end), ("end" == arg_name), print("")];
buf_stack.pop(arg_name); 
command = (("UNDEFINE(" + arg_name) + ")");
[goto(#undefine_end), ("end" == arg_name), print("")];
send_command(command);
buf_stack_reserv.push(arg_name);
goto(#undefine_start);
#undefine_end:
inside_vars_stack = inside_vars_stack_reserv;
buf_stack = buf_stack_reserv;
arg_name = "";
command = (("goto($" + func_name) + "_return_var)");
send_command(command);
#define_return_end:
print("");
inside_vars_stack = null;
buf_stack = null;
next_command(command);
command = ((("#" + (func_name + "_end:")) + "\n") + command);
send_command(command);
next_command(command);
i = 0; 
command_len = len(command); 
func_name_len = len(func_name);
func_name_br = (func_name + "(");
#start_entry: 
[goto(#again_end), ("end" == command), print("")];
number = index(command, func_name_br);
[goto(#mod_end), (-1 == number), print("")];
push(command);
push(func_name);
goto(#func_call_index);
#func_call_index_ret:
pop(func_pos);
[goto(#mod_end), (-1 == func_pos), print("")];
number = (number + func_name_len);
buf4 = command[number];
number = (number - func_name_len); 
[print(""), ("(" == buf4), goto(#mod_end)];
buf = command;
br_number = index(buf, "(");
left_border = (br_number + 1);
buf2 = buf;
#call_start:
[goto(#call_end), ("" == buf), print("")];
comma_pos = index(buf, ",");
[print(""), (-1 == comma_pos), goto(#comma_end)];
buf_len = len(buf);
comma_pos = (buf_len - 1);
#comma_end:
[print(""), (left_border == comma_pos), goto(#aend)];
arg_name="";
goto(#askip);
#aend:
arg_name = buf[left_border:comma_pos];
#askip:
command = (("push(" + arg_name) + ")");
[goto(#not_send_push), ("" == arg_name), print("")];
send_command(command);
#not_send_push:
comma_pos = (comma_pos + 1);
command_len = len(buf);
[print(""), (comma_pos == command_len), goto(#buf_mod_end)];
buf="";
left_border=0;
goto(#call_start);
#buf_mod_end:
buf = buf[comma_pos:command_len];
left_border = 0;
goto(#call_start);
#call_end:
buf = buf2;
buf3 = buf; 
func_begin = index(buf, func_name_br); 
command_len = len(buf);
internal_func_begin = (func_begin + func_name_len);
push(internal_func_begin);
push(buf);
$func_end_res="#gl_fe";
goto(#func_end_func);
#gl_fe:
pop(func_end);
func_end = (func_end + 1);
func_len = func_end; 
buf = buf[0:func_begin];
buf = (((buf + "$") + func_name) + "_res"); 
[goto(#nothing), (func_end == command_len), print("")];
buf2 = buf3[func_end:command_len];
buf = (buf + buf2);
#nothing:
[print(""),(void_flag), goto(#set_buf_nop_end)];
buf="print(\"\")";
#set_buf_nop_end:
str_call_number = str(call_number);
command = (((((("$" + func_name) + "_return_var=\"#")+func_name)+"_res")+str_call_number)+"\"");
send_command(command);
command = (("goto(#" + func_name) + ")");
send_command(command); 
command = (((("#" + func_name) + "_res") + str_call_number) + ":\n");
command = (command + (("pop($" + func_name) + "_res)"));
[goto(#not_send_void_pop_end), (void_flag), print("")];
send_command(command);
#not_send_void_pop_end: 
[print(""), (void_flag), goto(#send_void_mark_end)];
command = (((("#" + func_name) + "_res") + str_call_number) + ":\n");
command=(command+"print(\"\")");
send_command(command); 
#send_void_mark_end:
command = buf; 
call_number = (call_number + 1);
#mod_end:
send_command(command);
next_command(command);
goto(#start_entry);
#end_entry:
print("");
#command_end:
send_command(command);
next_command(command);
goto(#begin);
#again_end:
[print(""), (is_first), goto(#not_is_first)];
UNSET_SOURCE();
UNSET_DEST();
source = "benv/func_program.b";
SET_SOURCE("benv/func_program.b");
dest = "benv/func_program2.b";
SET_DEST("benv/func_program2.b");
is_first = False;
was_func = False;
next_command(command);
goto(#again_begin);
#not_is_first:
[print(""), (was_func), goto(#del_file)];
was_func = False;
REROUTE();
temp_dir = source; 
source = dest;
dest = temp_dir;
next_command(command);
goto(#again_begin);
#del_file:
DEL_DEST("benv/func_program2.b");
DEL_DEST("benv/recurs_program.b");
#end:
UNSET_SOURCE();
UNSET_DEST();
exit(0);
#reverse:
string buf;
stack res; 
stack s;
pop(s);
s.pop(buf);
#reverse_s:
[goto(#reverse_e), ("end" == buf), print("")];
res.push(buf);
s.pop(buf);
goto(#reverse_s);
#reverse_e:
push(res);
UNDEFINE(buf);
UNDEFINE(res);
UNDEFINE(s);
goto($reverse_ret);
#look_behind:
stack st;
stack this;
stack res;  
string buf;
int pos;
string symbol;
string reg;
string s;
pop(reg);
pop(s);
st = reg_find(reg, s);
#look_behind_s:
st.pop(this);
this.pop(buf);
[goto(#look_behind_e), ("end" == buf), print("")];
pos = int(buf);
[print(""), (0 == pos), goto(#is_not_zero)];
res.push("$");
goto(#look_behind_s);
#is_not_zero:
pos = (pos - 1);
symbol = s[pos];
res.push(symbol);
goto(#look_behind_s);
#look_behind_e:
push(res);
$reverse_ret = "#look_ret";
#look_ret:
pop(res);
push(res);
UNDEFINE(st);
UNDEFINE(this);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(pos);
UNDEFINE(symbol);
UNDEFINE(reg);
UNDEFINE(s);
goto(#look_behind_ret);
#indexes:
stack res;
	
int i;
int pointer; 
int s_len;
int s_len_old;
int sub_len;
string s;
string sub_s;
pop(s);
pop(sub_s);
s_len = len(s);
sub_len = len(sub_s);
s_len_old = s_len;
i = index(s, sub_s);
pointer = i;
#indexes_s:
[goto(#indexes_e), (-1 == i), print("")];
i = (i + (s_len_old - s_len));
res.push(i);
pointer = (pointer + sub_len);
[print(""), (pointer == s_len), goto(#iend)];
s = "";
goto(#iskip);
#iend:
s = s[pointer:s_len];
#iskip:
s_len = len(s);
i = index(s, sub_s);
pointer = i;
goto(#indexes_s);
#indexes_e:
push(res);
$reverse_ret = "#iret";
#iret:
pop(res);
push(res);
UNDEFINE(res);
UNDEFINE(i);
UNDEFINE(pointer);
UNDEFINE(s_len);
UNDEFINE(s_len_old);
UNDEFINE(sub_len);
UNDEFINE(s);
UNDEFINE(sub_s);
goto(indexes_ret);
#func_call_index:
string reg;
stack st;
stack ist;
int res;
string buf;
string symbol;
bool letter;
bool digit;
string command;
string func_name;
pop(command);
pop(func_name);
reg = (("(?:" + func_name) + ")");
push(reg);
push(command);
goto(#look_behind);
#look_behind_ret:
pop(st);
push(command);
push(func_name);
indexes_ret="#indexes_ret";
goto(#indexes);
#indexes_ret:
pop(ist);	
#func_call_index_s:
st.pop(symbol);
	
[print(""), ("end" == symbol), goto(#is_found)];
UNDEFINE(reg);
UNDEFINE(st);
UNDEFINE(ist);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(symbol);
UNDEFINE(letter);
UNDEFINE(digit);
UNDEFINE(command);
UNDEFINE(func_name);
push(-1);
goto(#func_call_index_ret);
#is_found:
ist.pop(buf);
[print("func_call_index ERROR\n"), ("end" == buf), print("")];
	
res = int(buf);
letter = is_letter(symbol);
digit = is_digit(symbol);	
[print(""), (NOT((((letter)OR(digit))OR("_" == symbol))OR("$" == symbol))), goto(#not_func)];
push(res);
UNDEFINE(reg);
UNDEFINE(st);
UNDEFINE(ist);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(symbol);
UNDEFINE(letter);
UNDEFINE(digit);
UNDEFINE(command);
UNDEFINE(func_name);
goto(#func_call_index_ret);	
#not_func:
goto(#func_call_index_s);
#end_func:
print("");
#in_stack:
stack s;
string el;
string buf;
bool res;
pop(s);
pop(el);
res = False;
s.pop(buf);
#_in_stack_s:
[goto(#_in_stack_e), ("end" == buf), print("")];
[print(""), (el == buf), goto(#_no)];
res = True;
goto(#_in_stack_e);
#_no:
s.pop(buf);
goto(#_in_stack_s);	
#_in_stack_e:
push(res);
UNDEFINE(s);
UNDEFINE(el);
UNDEFINE(buf);
UNDEFINE(res);
goto($in_stack_ret);
#ops:
string command;
string op;
pop(command);
pop(op);
stack quotes;
stack these_quotes; 
stack op_nums;
string buf;
stack res;
int num1;
int num2; 
int op_num;
bool was_quote;
bool to_add;
was_quote = False;
to_add = True;
push(op);
push(command);
indexes_ret="#_idx";
goto(#indexes);
#_idx:
pop(op_nums);
op_nums.pop(buf);
#_op_nums_s:
[goto(#_op_nums_e), ("end" == buf), print("")];
op_num = int(buf);
quotes = reg_find("\"(\\.|[^\"])*\"", command);
#_quotes_s:
quotes.pop(these_quotes);
these_quotes.pop(buf);
[goto(#_quotes_e), ("end" == buf), print("")];
#_these_quotes_s:
[goto(#_these_quotes_e), ("end" == buf), print("")];
num1 = int(buf);
these_quotes.pop(buf);
num2 = int(buf);
these_quotes.pop(buf);
was_quote = True;
goto(#_these_quotes_s);
#_these_quotes_e:
[print(""), ((op_num > num1)AND(op_num < num2)), goto(#_is_op_end)];
to_add = False;
goto(#_push_op_end);
#_is_op_end:	
goto(#_quotes_s);
#_quotes_e:
[goto(#_push_op_end), ((was_quote)AND(NOT(to_add))), print("")];
res.push(op_num);
was_quote = False;
to_add = True;
#_push_op_end:
print("");
op_nums.pop(buf);
was_quote = False;
to_add = True;
goto(#_op_nums_s);
#_op_nums_e:
$reverse_ret="#_rvs";
push(res);
goto(#reverse);
pop(res);
#_rvs:
push(res);
UNDEFINE(command);
UNDEFINE(op);
UNDEFINE(quotes);
UNDEFINE(these_quotes);
UNDEFINE(op_nums);
UNDEFINE(buf);
UNDEFINE(res);
UNDEFINE(num1);
UNDEFINE(num2);
UNDEFINE(op_num);
UNDEFINE(was_quote);
UNDEFINE(to_add);
goto($ops_ret);
#func_end_func:
string command;
int func_begin;
pop(command);
pop(func_begin);
stack obraces;
stack cbraces;
string obrace;
string cbrace;
string symbol;
int o_sum;
int c_sum;
int pos;
string spos;
int command_len;
bool stack_res;
command_len = len(command);
obrace = "(";
cbrace = ")";
o_sum = 1;
c_sum = 0;
pos = (func_begin + 1);
$ops_ret = "#_fe";
push(obrace);
push(command);
goto(#ops); 
#_fe:
pop(obraces);
$ops_ret = "#_fe2";
push(cbrace);
push(command);
goto(#ops); 
#_fe2:
pop(cbraces);
#_braces_s:
[print(""), (pos < command_len), goto(#_braces_e)];
spos = str(pos);
push(spos);
push(obraces);
$in_stack_ret="#_fe3";
goto(#in_stack);
#_fe3:
pop(stack_res);
[print(""), stack_res, goto(#_o_plus_end)];
o_sum = (o_sum + 1);
#_o_plus_end:
push(spos);
push(cbraces);
$in_stack_ret="#_fe4";
goto(#in_stack);
#_fe4:
pop(stack_res);
[print(""), stack_res, goto(#_c_plus_end)];
c_sum = (c_sum + 1);
#_c_plus_end:
[goto(#_braces_e), (o_sum == c_sum), print("")];
pos = (pos + 1);
goto(#_braces_s);
#_braces_e:
push(pos);
UNDEFINE(command);
UNDEFINE(func_begin);
UNDEFINE(obraces);
UNDEFINE(cbraces);
UNDEFINE(obrace);
UNDEFINE(cbrace);
UNDEFINE(symbol);
UNDEFINE(o_sum);
UNDEFINE(c_sum);
UNDEFINE(pos);
UNDEFINE(spos);
UNDEFINE(command_len);
UNDEFINE(stack_res);
goto($func_end_res);
