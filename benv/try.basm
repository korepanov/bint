string$ret;
intCOMMAND_COUNTER;
stringcommand;
COMMAND_COUNTER=0;
string$reverse_return_var;
stack$reverse_res;
goto(#reverse_end);
#reverse:print("");
stacks;
print("");
pop(s);
print("");
stringbuf;
stackres;
s.pop(buf);
#_reverse_s:print("");
[goto(#_reverse_e),("end"==buf),print("")];
res.push(buf);
s.pop(buf);
goto(#_reverse_s);
#_reverse_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(s);
goto($reverse_return_var);
#reverse_end:print("");
string$indexes_return_var;
stack$indexes_res;
goto(#indexes_end);
#indexes:print("");
stringsub_s;
strings;
print("");
pop(sub_s);
pop(s);
print("");
stackres;
inti;
intpointer;
ints_len;
ints_len_old;
intsub_len;
int$l0;
$l0=len(s);
s_len=$l0;
UNDEFINE($l0);
int$l0;
$l0=len(sub_s);
sub_len=$l0;
UNDEFINE($l0);
s_len_old=s_len;
int$ind0;
$ind0=index(s,sub_s);
i=$ind0;
UNDEFINE($ind0);
pointer=i;
#_indexes_s:print("");
[goto(#_indexes_e),(-1==i),print("")];
i=(i+(s_len_old-s_len));
res.push(i);
pointer=(pointer+sub_len);
int$sl_internal0;
int$sl_left0;
int$sl_right0;
$sl_left0=pointer;
$sl_right0=s_len;
string$sl0;
$sl0=s[$sl_left0:$sl_right0];
s=$sl0;
UNDEFINE($sl_internal0);
UNDEFINE($sl0);
UNDEFINE($sl_left0);
UNDEFINE($sl_right0);
int$l0;
$l0=len(s);
s_len=$l0;
UNDEFINE($l0);
int$ind0;
$ind0=index(s,sub_s);
i=$ind0;
UNDEFINE($ind0);
pointer=i;
goto(#_indexes_s);
#_indexes_e:print("");
stack$reverse_res0;
push(res);
$reverse_return_var="#reverse_res0";
goto(#reverse);
#reverse_res0:pop($reverse_res);
$reverse_res0=$reverse_res;
res=$reverse_res0;
push(res);
UNDEFINE($reverse_res0);
UNDEFINE(sub_len);
UNDEFINE(s_len_old);
UNDEFINE(s_len);
UNDEFINE(pointer);
UNDEFINE(i);
UNDEFINE(res);
UNDEFINE(sub_s);
UNDEFINE(s);
goto($indexes_return_var);
#indexes_end:print("");
string$SET_COMMAND_COUNTER_return_var;
goto(#SET_COMMAND_COUNTER_end);
#SET_COMMAND_COUNTER:print("");
intcounter;
print("");
pop(counter);
print("");
inti;
i=0;
stringcommand;
RESET_SOURCE();
COMMAND_COUNTER=counter;
#_set_start:print("");
[print(""),(i<counter),goto(#_set_end)];
next_command(command);
i=(i+1);
goto(#_set_start);
#_set_end:print("");
print("");
UNDEFINE(command);
UNDEFINE(i);
UNDEFINE(counter);
goto($SET_COMMAND_COUNTER_return_var);
#SET_COMMAND_COUNTER_end:print("");
string$get_command_return_var;
string$get_command_res;
goto(#get_command_end);
#get_command:print("");
intcounter;
print("");
pop(counter);
print("");
inti;
stringbuf;
stringcommand;
i=0;
RESET_SOURCE();
#_get_command_s:print("");
[print(""),(i<counter),goto(#_get_command_e)];
next_command(command);
i=(i+1);
goto(#_get_command_s);
#_get_command_e:print("");
push(COMMAND_COUNTER);
$SET_COMMAND_COUNTER_return_var="#SET_COMMAND_COUNTER_res0";
goto(#SET_COMMAND_COUNTER);
#SET_COMMAND_COUNTER_res0:print("");
print("");
push(command);
UNDEFINE(command);
UNDEFINE(buf);
UNDEFINE(i);
UNDEFINE(counter);
goto($get_command_return_var);
#get_command_end:print("");
string$switch_command_return_var;
goto(#switch_command_end);
#switch_command:print("");
print("");
COMMAND_COUNTER=(COMMAND_COUNTER+1);
next_command(command);
goto($switch_command_return_var);
#switch_command_end:print("");
string$stack_len_return_var;
int$stack_len_res;
goto(#stack_len_end);
#stack_len:print("");
stacks;
print("");
pop(s);
print("");
intres;
stringbuf;
res=0;
s.pop(buf);
#_stack_len_s:print("");
[goto(#_stack_len_e),("end"==buf),print("")];
res=(res+1);
s.pop(buf);
goto(#_stack_len_s);
#_stack_len_e:print("");
push(res);
UNDEFINE(buf);
UNDEFINE(res);
UNDEFINE(s);
goto($stack_len_return_var);
#stack_len_end:print("");
string$ops_return_var;
stack$ops_res;
goto(#ops_end);
#ops:print("");
stringop;
stringcommand;
print("");
pop(op);
pop(command);
print("");
stackquotes;
stackthese_quotes;
stackop_nums;
stringbuf;
stackres;
intnum1;
intnum2;
intop_num;
boolwas_quote;
boolto_add;
was_quote=False;
to_add=True;
stack$indexes_res0;
push(command);
push(op);
$indexes_return_var="#indexes_res0";
goto(#indexes);
#indexes_res0:pop($indexes_res);
$indexes_res0=$indexes_res;
op_nums=$indexes_res0;
op_nums.pop(buf);
#_op_nums_s:print("");
[goto(#_op_nums_e),("end"==buf),print("")];
int$I0;
$I0=int(buf);
op_num=$I0;
UNDEFINE($I0);
stack$stack_var0;
$stack_var0=reg_find("\"(\\.|[^\"])*\"",command);
quotes=$stack_var0;
UNDEFINE($stack_var0);
#_quotes_s:print("");
quotes.pop(these_quotes);
these_quotes.pop(buf);
[goto(#_quotes_e),("end"==buf),print("")];
#_these_quotes_s:print("");
[goto(#_these_quotes_e),("end"==buf),print("")];
int$I0;
$I0=int(buf);
num1=$I0;
UNDEFINE($I0);
these_quotes.pop(buf);
int$I0;
$I0=int(buf);
num2=$I0;
UNDEFINE($I0);
these_quotes.pop(buf);
was_quote=True;
goto(#_these_quotes_s);
#_these_quotes_e:print("");
[print(""),((op_num>num1)AND(op_num<num2)),goto(#_is_op_end)];
to_add=False;
goto(#_push_op_end);
#_is_op_end:print("");
goto(#_quotes_s);
#_quotes_e:print("");
[goto(#_push_op_end),((was_quote)AND(NOT(to_add))),print("")];
res.push(op_num);
was_quote=False;
to_add=True;
#_push_op_end:print("");
print("");
op_nums.pop(buf);
was_quote=False;
to_add=True;
goto(#_op_nums_s);
#_op_nums_e:print("");
stack$reverse_res1;
push(res);
$reverse_return_var="#reverse_res1";
goto(#reverse);
#reverse_res1:pop($reverse_res);
$reverse_res1=$reverse_res;
res=$reverse_res1;
push(res);
UNDEFINE($reverse_res1);
UNDEFINE($indexes_res0);
UNDEFINE(to_add);
UNDEFINE(was_quote);
UNDEFINE(op_num);
UNDEFINE(num2);
UNDEFINE(num1);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(op_nums);
UNDEFINE(these_quotes);
UNDEFINE(quotes);
UNDEFINE(op);
UNDEFINE(command);
goto($ops_return_var);
#ops_end:print("");
string$block_end_return_var;
int$block_end_res;
goto(#block_end_end);
#block_end:print("");
print("");
stringop1;
stringop2;
stringcode;
stringcommand_buf;
into_sum;
intc_sum;
intcommand_len;
stackobraces;
stackcbraces;
stringbuf;
stringspos;
intcounter;
intbuf_counter;
intpos;
counter=COMMAND_COUNTER;
int$l0;
$l0=len(command);
command_len=$l0;
UNDEFINE($l0);
int$sl_internal0;
int$sl_left0;
int$sl_right0;
$sl_left0=1;
$sl_right0=command_len;
string$sl0;
$sl0=command[$sl_left0:$sl_right0];
command=$sl0;
UNDEFINE($sl_internal0);
UNDEFINE($sl0);
UNDEFINE($sl_left0);
UNDEFINE($sl_right0);
code=command;
next_command(command);
counter=(counter+1);
int$sl_internal0;
int$sl_left0;
int$sl_right0;
$sl_internal0=0;
string$sl0;
$sl0=command[$sl_internal0];
code=(code+$sl0);
UNDEFINE($sl_internal0);
UNDEFINE($sl0);
UNDEFINE($sl_left0);
UNDEFINE($sl_right0);
o_sum=1;
c_sum=0;
#_block_s:print("");
[goto(#_block_e),(o_sum==c_sum),print("")];
stack$ops_res0;
push(code);
push("{");
$ops_return_var="#ops_res0";
goto(#ops);
#ops_res0:pop($ops_res);
$ops_res0=$ops_res;
obraces=$ops_res0;
stack$ops_res1;
push(code);
push("}");
$ops_return_var="#ops_res1";
goto(#ops);
#ops_res1:pop($ops_res);
$ops_res1=$ops_res;
cbraces=$ops_res1;
int$stack_len_res0;
push(obraces);
$stack_len_return_var="#stack_len_res0";
goto(#stack_len);
#stack_len_res0:pop($stack_len_res);
$stack_len_res0=$stack_len_res;
o_sum=$stack_len_res0;
int$stack_len_res1;
push(cbraces);
$stack_len_return_var="#stack_len_res1";
goto(#stack_len);
#stack_len_res1:pop($stack_len_res);
$stack_len_res1=$stack_len_res;
c_sum=$stack_len_res1;
int$l0;
$l0=len(command);
command_len=$l0;
UNDEFINE($l0);
int$sl_internal0;
int$sl_left0;
int$sl_right0;
$sl_left0=1;
$sl_right0=command_len;
string$sl0;
$sl0=command[$sl_left0:$sl_right0];
command_buf=$sl0;
UNDEFINE($sl_internal0);
UNDEFINE($sl0);
UNDEFINE($sl_left0);
UNDEFINE($sl_right0);
code=(code+command_buf);
next_command(command);
counter=(counter+1);
int$sl_internal0;
int$sl_left0;
int$sl_right0;
$sl_internal0=0;
string$sl0;
$sl0=command[$sl_internal0];
command_buf=$sl0;
UNDEFINE($sl_internal0);
UNDEFINE($sl0);
UNDEFINE($sl_left0);
UNDEFINE($sl_right0);
code=(code+command_buf);
goto(#_block_s);
#_block_e:print("");
buf_counter=(COMMAND_COUNTER-1);
push(buf_counter);
$SET_COMMAND_COUNTER_return_var="#SET_COMMAND_COUNTER_res1";
goto(#SET_COMMAND_COUNTER);
#SET_COMMAND_COUNTER_res1:print("");
print("");
next_command(command);
COMMAND_COUNTER=(COMMAND_COUNTER+1);
push((counter-1));
UNDEFINE($stack_len_res1);
UNDEFINE($stack_len_res0);
UNDEFINE($ops_res1);
UNDEFINE($ops_res0);
UNDEFINE(pos);
UNDEFINE(buf_counter);
UNDEFINE(counter);
UNDEFINE(spos);
UNDEFINE(buf);
UNDEFINE(cbraces);
UNDEFINE(obraces);
UNDEFINE(command_len);
UNDEFINE(c_sum);
UNDEFINE(o_sum);
UNDEFINE(command_buf);
UNDEFINE(code);
UNDEFINE(op2);
UNDEFINE(op1);
goto($block_end_return_var);
#block_end_end:print("");
string$println_return_var;
goto(#println_end);
#println:print("");
strings;
print("");
pop(s);
print("");
string $print_arg0;
$print_arg0=s;
print($print_arg0);
UNDEFINE($print_arg0);
string $print_arg0;
$print_arg0="\n";
print($print_arg0);
UNDEFINE($print_arg0);
UNDEFINE(s);
goto($println_return_var);
#println_end:print("");
string$in_stack_return_var;
bool$in_stack_res;
goto(#in_stack_end);
#in_stack:print("");
stringel;
stacks;
print("");
pop(el);
pop(s);
print("");
stringbuf;
boolres;
res=False;
s.pop(buf);
#_in_stack_s:print("");
[goto(#_in_stack_e),("end"==buf),print("")];
[print(""),(el==buf),goto(#_no)];
res=True;
goto(#_in_stack_e);
#_no:print("");
s.pop(buf);
goto(#_in_stack_s);
#_in_stack_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(el);
UNDEFINE(s);
goto($in_stack_return_var);
#in_stack_end:print("");
string$func_end_return_var;
int$func_end_res;
goto(#func_end_end);
#func_end:print("");
intfunc_begin;
stringcommand;
print("");
pop(func_begin);
pop(command);
print("");
stackobraces;
stackcbraces;
stringobrace;
stringcbrace;
stringsymbol;
into_sum;
intc_sum;
intpos;
stringspos;
intcommand_len;
int$l0;
$l0=len(command);
command_len=$l0;
UNDEFINE($l0);
obrace="(";
cbrace=")";
o_sum=1;
c_sum=0;
pos=(func_begin+1);
stack$ops_res2;
push(command);
push(obrace);
$ops_return_var="#ops_res2";
goto(#ops);
#ops_res2:pop($ops_res);
$ops_res2=$ops_res;
obraces=$ops_res2;
stack$ops_res3;
push(command);
push(cbrace);
$ops_return_var="#ops_res3";
goto(#ops);
#ops_res3:pop($ops_res);
$ops_res3=$ops_res;
cbraces=$ops_res3;
#_braces_s:print("");
[print(""),(pos<command_len),goto(#_braces_e)];
string$s0;
$s0=str(pos);
spos=$s0;
UNDEFINE($s0);
bool$in_stack_res0;
push(obraces);
push(spos);
$in_stack_return_var="#in_stack_res0";
goto(#in_stack);
#in_stack_res0:pop($in_stack_res);
$in_stack_res0=$in_stack_res;
[print(""),$in_stack_res0,goto(#_o_plus_end)];
o_sum=(o_sum+1);
#_o_plus_end:print("");
bool$in_stack_res1;
push(cbraces);
push(spos);
$in_stack_return_var="#in_stack_res1";
goto(#in_stack);
#in_stack_res1:pop($in_stack_res);
$in_stack_res1=$in_stack_res;
[print(""),$in_stack_res1,goto(#_c_plus_end)];
c_sum=(c_sum+1);
#_c_plus_end:print("");
[goto(#_braces_e),(o_sum==c_sum),print("")];
pos=(pos+1);
goto(#_braces_s);
#_braces_e:print("");
push(pos);
UNDEFINE($in_stack_res1);
UNDEFINE($in_stack_res0);
UNDEFINE($ops_res3);
UNDEFINE($ops_res2);
UNDEFINE(command_len);
UNDEFINE(spos);
UNDEFINE(pos);
UNDEFINE(c_sum);
UNDEFINE(o_sum);
UNDEFINE(symbol);
UNDEFINE(cbrace);
UNDEFINE(obrace);
UNDEFINE(cbraces);
UNDEFINE(obraces);
UNDEFINE(func_begin);
UNDEFINE(command);
goto($func_end_return_var);
#func_end_end:print("");
stringroot_source;
intnum;
string$init_return_var;
goto(#init_end);
#init:print("");
print("");
root_source="benv/prep_try_program.b";
SET_SOURCE(root_source);
SET_DEST("benv/try_program.b");
goto($init_return_var);
#init_end:print("");
string$finish_return_var;
goto(#finish_end);
#finish:print("");
print("");
UNSET_SOURCE();
UNSET_DEST();
DEL_DEST(root_source);
goto($finish_return_var);
#finish_end:print("");
string$is_try_return_var;
bool$is_try_res;
goto(#is_try_end);
#is_try:print("");
stringcommand;
print("");
pop(command);
print("");
stackst;
stringop;
op="try{";
stack$ops_res4;
push(command);
push(op);
$ops_return_var="#ops_res4";
goto(#ops);
#ops_res4:pop($ops_res);
$ops_res4=$ops_res;
st=$ops_res4;
stringbuf;
st.pop(buf);
[print(""),(buf=="end"),goto(#_cond0_end)];
push(False);
UNDEFINE(buf);
UNDEFINE($ops_res4);
UNDEFINE(op);
UNDEFINE(st);
UNDEFINE(command);
goto($is_try_return_var);
#_cond0_end:print("");
print("");
intpos;
int$I0;
$I0=int(buf);
pos=$I0;
UNDEFINE($I0);
[print(""),(NOT(pos==0)),goto(#_cond1_end)];
string $print_arg0;
$print_arg0="try.b: error in the try format\n";
print($print_arg0);
UNDEFINE($print_arg0);
exit(1);
#_cond1_end:print("");
print("");
push(True);
UNDEFINE(pos);
UNDEFINE(st);
UNDEFINE(op);
UNDEFINE($ops_res4);
UNDEFINE(buf);
UNDEFINE(command);
goto($is_try_return_var);
#is_try_end:print("");
string$modify_block_return_var;
goto(#modify_block_end);
#modify_block:print("");
print("");
stringsnum;
string$s0;
$s0=str(num);
snum=$s0;
UNDEFINE($s0);
inte;
int$block_end_res0;
$block_end_return_var="#block_end_res0";
goto(#block_end);
#block_end_res0:pop($block_end_res);
$block_end_res0=$block_end_res;
e=$block_end_res0;
stringbuf;
buf="error=\"\"";
send_command(buf);
buf="$toPanic=False";
send_command(buf);
buf="if(True){print(\"\")";
send_command(buf);
$switch_command_return_var="#switch_command_res0";
goto(#switch_command);
#switch_command_res0:print("");
print("");
print("");
print("");
bool$for0;
#_for0:print("");
[print(""),(COMMAND_COUNTER<e),goto(#_cond2_end)];
buf="if(NOT(error==\"\")){print(\"\")";
send_command(buf);
buf=(("goto(#_attempt"+snum)+")");
send_command(buf);
buf="}";
send_command(buf);
send_command(command);
$switch_command_return_var="#switch_command_res1";
goto(#switch_command);
#switch_command_res1:print("");
print("");
print("");
#_undef_for0:print("");
#_cond2_end:print("");
[print(""),($for0),goto(#_cond3_end)];
goto(#_for0_end);
#_cond3_end:print("");
[print(""),(COMMAND_COUNTER<e),goto(#_cond4_end)];
goto(#_for0);
#_cond4_end:print("");
#_for0_end:print("");
UNDEFINE($for0);
print("");
buf=(("#_attempt"+snum)+":\nprint(\"\")");
send_command(buf);
num=(num+1);
buf="$toPanic=True";
send_command(buf);
UNDEFINE(buf);
UNDEFINE($block_end_res0);
UNDEFINE(e);
UNDEFINE(snum);
goto($modify_block_return_var);
#modify_block_end:print("");
string$main_return_var;
goto(#main_end);
#main:print("");
print("");
$init_return_var="#init_res0";
goto(#init);
#init_res0:print("");
print("");
$switch_command_return_var="#switch_command_res2";
goto(#switch_command);
#switch_command_res2:print("");
print("");
print("");
print("");
bool$for1;
#_for1:print("");
[print(""),(NOT(command=="end")),goto(#_cond5_end)];
bool$is_try_res0;
push(command);
$is_try_return_var="#is_try_res0";
goto(#is_try);
#is_try_res0:pop($is_try_res);
$is_try_res0=$is_try_res;
[print(""),($is_try_res0),goto(#_cond6_end)];
$modify_block_return_var="#modify_block_res0";
goto(#modify_block);
#modify_block_res0:print("");
print("");
#_cond6_end:print("");
print("");
send_command(command);
$switch_command_return_var="#switch_command_res3";
goto(#switch_command);
#switch_command_res3:print("");
print("");
print("");
#_undef_for1:print("");
#_cond5_end:print("");
[print(""),($for1),goto(#_cond7_end)];
goto(#_for1_end);
#_cond7_end:print("");
[print(""),(NOT(command=="end")),goto(#_cond8_end)];
goto(#_for1);
#_cond8_end:print("");
#_for1_end:print("");
UNDEFINE($for1);
print("");
$finish_return_var="#finish_res0";
goto(#finish);
#finish_res0:print("");
print("");
UNDEFINE($is_try_res0);
goto($main_return_var);
#main_end:print("");
$main_return_var="#main_res0";
goto(#main);
#main_res0:print("");
print("");
